{"description":"","props":{"animate":{"type":{"name":"object"},"required":false,"description":"The animate prop specifies props for victory-animation to use. It this prop is\nnot given, the bar chart will not tween between changing data / style props.\nLarge datasets might animate slowly due to the inherent limits of svg rendering.\n@examples {velocity: 0.02, onEnd: () => alert(\"done!\")}"},"data":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"any","required":false},"y":{"name":"any","required":false}}}},{"name":"arrayOf","value":{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"any","required":false},"y":{"name":"any","required":false}}}}}]},"required":false,"description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point should be an object with x and y properties.\n@examples [{x: 1, y:2}, {x: 2, y: 3}],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]","defaultValue":{"value":"[\n  {x: 1, y: 1},\n  {x: 2, y: 2},\n  {x: 3, y: 3},\n  {x: 4, y: 4}\n]","computed":false}},"dataAttributes":{"type":{"name":"union","value":[{"name":"object"},{"name":"arrayOf","value":{"name":"object"}}]},"required":false,"description":"The dataAttributes prop describes how a data set should be styled.\nThis prop can be given as an object, or an array of objects. If this prop is\ngiven as an array of objects, the properties of each object in the array will\nbe applied to the data points in the corresponding array of the data prop.\n@examples {fill: \"blue\", opacity: 0.6}, [{fill: \"red\"}, {fill: \"orange\"}]"},"categories":{"type":{"name":"array"},"required":false,"description":"The categories prop specifies the categories for a bar chart. This prop should\nbe given as an array of string values, numeric values, or arrays. When this prop is\ngiven as an array of arrays, the minimum and maximum values of the arrays define range bands,\nallowing numeric data to be grouped into segments.\n@examples [\"dogs\", \"cats\", \"mice\"], [[0, 5], [5, 10], [10, 15]]"},"colorScale":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"string"}},{"name":"enum","value":[{"value":"\"victory\"","computed":false},{"value":"\"gray\"","computed":false},{"value":"\"red\"","computed":false},{"value":"\"bluePurple\"","computed":false},{"value":"\"yellowBlue\"","computed":false}]}]},"required":false,"description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as a string, which will one of the five\nbaked-in color scales: \"victory\", \"grayscale\", \"red\", \"bluePurple\", and \"yellowBlue\".\nIf it is not defined, the default Victory grayscale will be used, and if the fill\nproperty on the dataAttributes prop is defined, it will overwrite the colorScale prop.\nThe user can pass in an array of hex string values to use as their own scale, and\nVictoryBar will automatically assign values from this color scale to the bars."},"domain":{"type":{"name":"union","value":[{"name":"array"},{"name":"shape","value":{"x":{"name":"array","required":false},"y":{"name":"array","required":false}}}]},"required":false,"description":"The domain prop describes the range of values your bar chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n@examples [-1, 1], {x: [0, 100], y: [0, 1]}"},"height":{"type":{"name":"number"},"required":false,"description":"The height props specifies the height of the chart container element in pixels","defaultValue":{"value":"300","computed":false}},"horizontal":{"type":{"name":"bool"},"required":false,"description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},"labels":{"type":{"name":"array"},"required":false,"description":"The labels prop defines labels that will appear above each bar or\ngroup of bars in your bar chart. This prop should be given as an array of values.\nThe number of elements in the label array should be equal to number of elements in\nthe categories array, or if categories is not defined, to the number of unique\nx values in your data. Use this prop to add labels to individual bars, stacked bars,\nand groups of bars.\n@examples: [\"spring\", \"summer\", \"fall\", \"winter\"]"},"labelComponents":{"type":{"name":"array"},"required":false,"description":"The labelComponents prop takes in an array of entire, HTML-complete label components\nwhich will be used to create labels for individual bars, stacked bars, or groups of\nbars as appropriate."},"padding":{"type":{"name":"union","value":[{"name":"number"},{"name":"shape","value":{"top":{"name":"number","required":false},"bottom":{"name":"number","required":false},"left":{"name":"number","required":false},"right":{"name":"number","required":false}}}]},"required":false,"description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right.","defaultValue":{"value":"50","computed":false}},"scale":{"type":{"name":"union","value":[{"name":"func"},{"name":"shape","value":{"x":{"name":"func","required":false},"y":{"name":"func","required":false}}}]},"required":false,"description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a function, or as an object that specifies separate functions for x and y.\n@examples d3.time.scale(), {x: d3.scale.linear(), y: d3.scale.log()}","defaultValue":{"value":"d3.scale.linear()","computed":true}},"stacked":{"type":{"name":"bool"},"required":false,"description":"The stacked prop determines whether the chart should consist of stacked bars.\nWhen this prop is set to false, grouped bars will be rendered instead.","defaultValue":{"value":"false","computed":false}},"standalone":{"type":{"name":"bool"},"required":false,"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose VictoryBar with other components within an enclosing <svg> tag.","defaultValue":{"value":"true","computed":false}},"style":{"type":{"name":"object"},"required":false,"description":"The style prop specifies styles for your chart. VictoryBar relies on Radium,\nso valid Radium style objects should work for this prop, however height, width, and margin\nare used to calculate range, and need to be expressed as a number of pixels\n@examples {data: {fill: \"red\", width: 8}, labels: {fontSize: 12}}"},"width":{"type":{"name":"number"},"required":false,"description":"The width props specifies the width of the chart container element in pixels","defaultValue":{"value":"450","computed":false}}}}