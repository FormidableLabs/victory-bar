{"description":"","props":{"data":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"any","required":false},"y":{"name":"any","required":false}}}},{"name":"arrayOf","value":{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"any","required":false},"y":{"name":"any","required":false}}}}}]},"required":false,"description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point should be an object with x and y properties.\n@exampes [\n  {x: new Date(1982, 1, 1), y: 125},\n  {x: new Date(1987, 1, 1), y: 257},\n  {x: new Date(1993, 1, 1), y: 345}\n],\n[\n  [{x: 5, y: 3}, {x: 4, y: 2}, {x: 3, y: 1}],\n  [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}],\n  [{x: 1, y: 2}, {x: 2, y: 2}, {x: 3, y: 2}]\n]"},"dataAttributes":{"type":{"name":"union","value":[{"name":"object"},{"name":"arrayOf","value":{"name":"object"}}]},"required":false,"description":"The dataAttributes prop describes how a data set should be styled.\nThis prop can be given as an object, or an array of objects. If this prop is\ngiven as an array of objects, the properties of each object in the array will\nbe applied to the data points in the corresponding array of the data prop.\n@exampes {color: \"blue\", opacity: 0.6},\n[{color: \"red\"}, {color: \"orange\"}]"},"categories":{"type":{"name":"array"},"required":false,"description":"The categories prop specifies the categories for a bar chart. This prop should\nbe given as an array of string values, numeric values, or arrays. When this prop is\ngiven as an array of arrays, the minimum and maximum values of the arrays define range bands,\nallowing numeric data to be grouped into segments.\n@example [\"dogs\", \"cats\", \"mice\"], [[0, 5], [5, 10], [10, 15]]"},"categoryLabels":{"type":{"name":"array"},"required":false,"description":"The categoryLabels prop defines labels that will appear above each bar or\ngroup of bars in your bar chart This prop should be given as an array of values.\nThe number of elements in the label array should be equal to number of elements in\nthe categories array, or if categories is not defined, to the number of unique\nx values in your data. Use this prop to add labels to stacked bars and groups of\nbars. Adding labels to individual bars can be accomplished by adding a label\nproperty directly to the data object.\n@examples: [\"spring\", \"summer\", \"fall\", \"winter\"]"},"domain":{"type":{"name":"union","value":[{"name":"array"},{"name":"shape","value":{"x":{"name":"array","required":false},"y":{"name":"array","required":false}}}]},"required":false,"description":"The domain prop describes the range of values your bar chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n@exampes [-1, 1], {x: [0, 100], y: [0, 1]}"},"range":{"type":{"name":"union","value":[{"name":"array"},{"name":"shape","value":{"x":{"name":"array","required":false},"y":{"name":"array","required":false}}}]},"required":false,"description":"The range prop describes the range of pixels your bar chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a range will be calculated based on the height,\nwidth, and margin provided in the style prop, or in default styles. It is usually\na good idea to let the chart component calculate its own range.\n@exampes [0, 500], {x: [0, 500], y: [500, 300]}"},"scale":{"type":{"name":"union","value":[{"name":"func"},{"name":"shape","value":{"x":{"name":"func","required":false},"y":{"name":"func","required":false}}}]},"required":false,"description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a function, or as an object that specifies separate functions for x and y.\n@exampes d3.time.scale(), {x: d3.scale.linear(), y: d3.scale.log()}","defaultValue":{"value":"d3.scale.linear()","computed":true}},"animate":{"type":{"name":"object"},"required":false,"description":"The animate prop specifies props for victory-animation to use. It this prop is\nnot given, the bar chart will not tween between changing data / style props.\nLarge datasets might animate slowly due to the inherent limits of svg rendering.\n@examples {line: {delay: 5, velocity: 10, onEnd: () => alert(\"woo!\")}}"},"stacked":{"type":{"name":"bool"},"required":false,"description":"The stacked prop determines whether the chart should consist of stacked bars.\nWhen this prop is set to false, grouped bars will be rendered instead.","defaultValue":{"value":"false","computed":false}},"style":{"type":{"name":"object"},"required":false,"description":"The style prop specifies styles for your chart. VictoryBar relies on Radium,\nso valid Radium style objects should work for this prop, however height, width, and margin\nare used to calculate range, and need to be expressed as a number of pixels\n@example {width: 500, height: 300, data: {fill: \"red\", opacity: 1, width: 8}}"},"standalone":{"type":{"name":"bool"},"required":false,"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose VictoryBar with other components within an enclosing <svg> tag.","defaultValue":{"value":"true","computed":false}},"horizontal":{"type":{"name":"bool"},"required":false,"description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."}}}